@model  VideoGameAPI_Example.ViewModels.SearchViewModel
@{
    ViewBag.Title = "GetGames";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Search for Top Rated Games</h2>
<h4>search text: <span id="gameTitle"></span></h4>

<table id="games" class="table table-bordered table-hover">
    <thead>
        <tr>
            <th>
                Name
            </th>
            <th>
                Genres
            </th>
            <th>
                Platforms
            </th>
            <th>
                Summary
            </th>
            <th>
                Overall Rating
            </th>
        </tr>
        @*<tr>
                <td>
                    <!-- used to test /api/topgames, and view json results -->
                    <button class="btn-link js-ajax">Get games test</button>
                </td>
                <td>
                    Name
                </td>
                <td>
                    Genres
                </td>
                <td>
                    Platforms
                </td>
                <td>
                    Summary
                </td>
                <td>
                    Overall Rating
                </td>
            </tr>*@
    </thead>
</table>

@section scripts
{
    <script>
        $(document).ready(function () {

            // store a list of genres and platforms
            var gameTitle = @Model.Name;
            var genreList = @Html.Raw(Model.GenresJSON.ToString());
            var platformList = @Html.Raw(Model.PlatformsJSON.ToString());

            // hide datatable errors from the user
            $.fn.dataTable.ext.errMode = 'none';

            // send missing data errors to the console
            $('#games').on('error.dt', function (e, settings, techNote, message) {
                console.log('An error has been reported by DataTables: ', message);
            }).DataTable(
                {
                    ajax: {
                        type: "POST",
                        url: "/Api/Search",
                        data: {
                            'name': @Model.Name,
                        },
                        dataSrc: ""
                    },
                    columns: [
                        {
                            data: "name",
                            render: function (data, type, row) {
                                return "<a href='../Game/" + row.id + "'>" + data + "</a>";
                            }
                        },
                        {
                            data: "genres",  // provide the genre name based on the model.genres.Name
                            render: function (data) {
                                var genreText = "";

                                genreList.forEach(function (genre) {

                                    if (!data) return;

                                    if (data.includes(genre.Id)) {
                                        genreText += genre.Name + ", ";
                                    }
                                })

                                // remove the last comma and space
                                if (genreText.length > 0) {
                                    genreText = genreText.substr(0, genreText.length - 2);
                                }

                                return "<span>" + genreText + "</span>";
                            }
                        },
                        {
                            data: "platforms",  // provide the platform name based on the model.platforms.name
                            render: function (data) {
                                var platformText = "";

                                platformList.forEach(function (platform) {

                                    if (!data) return;

                                    if (data.includes(platform.Id)) {
                                        platformText += platform.Name + ", ";
                                    }
                                })

                                // remove the last comma and space
                                if (platformText.length > 0) {
                                    platformText = platformText.substr(0, platformText.length - 2);
                                }

                                $("#platformTitle").html(platformText);

                                return "<span>" + platformText + "</span>";
                            }
                        },
                        {
                            data: "summary",
                            render: function (data) {
                                if (data) {
                                    return data.substring(0, 100) +
                                        "<button class='btn btn-link dots' " +
                                        ">...[more]</button><span class='more hidden'>" +
                                        data.substring(100, data.length) +
                                        "<button class='btn btn-link less'>...[less]</button></span>";
                                }
                                else {
                                    return "Description not available.";
                                }
                            }
                        },
                        {
                            data: "total_rating",
                            render: function (data) {
                                return data.toFixed(2);
                            }
                        }
                    ],
                    order: [[ 4, "desc"]]
                });

            //used to test /api/topgames, and view json results
            //$("#games").on("click", ".js-ajax", function () {
            //    $.ajax({
            //        url: "/Api/TopGames/",
            //        method: "GET"
            //    }).done(function (response) {
            //        console.log(response);
            //    });
            //});
        })
    </script>

    @Scripts.Render("~/bundles/site")
}

